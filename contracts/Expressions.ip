module Expressions;

contract Expressions {
    public pay mut fn exp1() {
        1 + 2 * 3;
    }

    public mut fn exp2() -> bool {
        2 >> 2 >> 2 + 1 >> 3 + 1;
    }

    public mut fn exp3() -> bool {
        2 > 2 >= 4 < 5 << 2 >> 1 >= 2 < 2 >> 2 << 2 < 2;
    }

    public mut fn exp4() -> bool {
        1 == 2 == 3 == 4 != 5 != 5 == 2;
    }

    public mut fn exp5() -> bool {
        true && false && true && true || false || false && true;
    }

    public mut fn exp7() -> bool {
        (true && false) & (true & ((true || false) | ((false && (true || false)) ^ (true & (true ^ (false && true))))));
    }

    public mut fn exp8() -> bool {
        (1 + 2) * 3;
    }

    public mut fn exp9() -> bool {
        --2 + 3;
    }
}