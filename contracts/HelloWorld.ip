module HelloWorld;

import S, Z, T, Q, States from Structs;

contract Contract {
  public mut uint a <- 123;
  public uint b;
  private string j;
  private C myC;
  private S myS;
 
  constructor() {
    myC <- new C(10);
    a <- 0;
    j <- "0";
  }

  public mut fn fact (uint n) -> uint {
    Z v storage <- Z { h = T { b = Q { q = true }, z = 123 }, x = 1, y = "2" };
    mut bool aaa := v.h.b.q;
    if (n == 1) {
      uint wallagong := 23;
      return 1;
    }
    return n * fact(n - 1);
  }

  public mut fn f1 () override {
    a <- 123;
    address addr := 0x1234567890123456789012345678901234567890;
    if (true) {
      return;
    } else {
      return;
    }
    a <- 256;
  }
}

open proxy Proxy for Facet1, Facet2 {
  @      *   public      string test;
  @ Facet1   private mut string x;
  @ Facet2   private mut string y; 
}

facet Facet1 to Proxy {
  public mut fn f1 (uint uh) -> string {
    x <- "123";
    y <- "3";
    mut uint z := 123;
    mut string y := "false";
    mut string c := y;
    States st := STARTED;
    y := "true";
    mut string q := "abc";
    if (true) {
      mut string stuff := "stuff";
      if (true) {
        mut string kek := "kek";
        mut uint i := 5;
        while (i > 0) {
          --i;
        }
      }
    }
    return c;
  }
}

facet Facet2 to Proxy {
  private fn sq(uint o) -> uint {
    return o * o;
  }

  private mut fn f2 () -> bool {
    uint A := sq(25);
    return true;
  }

  public fn m() {
    n();
  }

  public fn n() {
    m();
  }
}

facet Facet3 to Proxy {}