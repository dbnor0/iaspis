module HelloWorld;

import WA, S, Z, T, Q, States from Structs;


contract Contract {
  public mut uint a <- 123;
  public uint b;
  private string j;
  private S myS;
  private Z zzz;
  private uint[] xs;
  private uint[][] xxs;
  private mut WA wa;
  private mut WA[] was;
  private mut mapping (string => uint) map;
  private mut mapping (uint => uint[][]) m2;
  private mut mapping (uint => mapping(string => uint[][])) mm;
  private bytes yooo;
  
  constructor() {
    a <- 0;
    j <- "0";
  }

  public mut fn fact (uint n) -> uint {
    Z storage v <- zzz;
    mut bool aaa := v.h.b.q;
    if (n == 1) {
      uint hhh := 23;
      return 1;
    }
    bytes2 bbb := 0x1234;
    string memory jj := j;
    bytes memory b3 := yooo;
    string memory s1 := "hello ";
    string memory s2 := "world";
    string memory s12 := sconcat(s1, j);

    map["heh"] <- 1;
    mm[0]["test"] <- [ [1], [1] ];
    m2[0] <- [ [ 0 ] ];
    was[0] <- wa;
    was[0].f[0][0] <- 11;
    was[0].f[1] <- [1, 2, 3, 4, 5];
    uint haha := xs[0];
    uint[] storage test <- xxs[0];
    return n * fact(n - 1);
  }

  public pay mut fn f1 () override {
    a <- 123;
    uint id := block.chainid;
    uint o := tx.gasprice;
    bytes32 b32 := blockhash(1);
    address addr := 0x1234567890123456789012345678901234567890;
    uint bl := balanceof(addr);
    delegatecall(addr, yooo);
    if (true) {
      return;
    } else {
      return;
    }
    a <- 256;
  }
}

proxy Proxy for Facet1, Facet2 {
  @      *   public  mut string test;
  @ Facet1   private mut string x;
  @ Facet2   private mut string y; 
}

facet Facet1 to Proxy {
  public mut fn f1 (uint uh) -> string memory {
    x <- "123";
    test <- "str";
    mut uint z := 123;
    mut string memory y := "false";
    mut string memory c := y;
    mut string memory x := "str2";
    uint o := tx.gasprice;
    x := "dd";
    States st := States::STARTED;
    y := "true";
    mut string memory q := "str3";
    if (true) {
      mut string memory stuff := "str4";
      if (true) {
        mut string memory kek := "kek";
        mut uint i := 5;
        while (i > 0) {
          test <- "uh oh";
          --i;
        }
      }
    } else {
      test <- "str5";
    }
    return c;
  }
}

facet Facet2 to Proxy {
  private fn sq(uint o) -> uint {
    return o * o;
  }

  private mut fn f2 () -> bool {
    uint A := sq(25);
    return true;
  }

  public fn m() {
    n();
  }

  public fn n() {
    m();
  }
}

facet Facet3 to Proxy {
  public pay mut fn m() {
    test <- "!23";
    send(0x1234567890123456789012345678901234567890, 1);
  }
}