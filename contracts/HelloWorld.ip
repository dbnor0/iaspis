module Proxy;

import ERC721;
import Ownable;

interface ITest {
    public fn test (uint256 a, string b, bool c) -> uint256;
}

abstract contract Contract {
    public  uint256 a;
    private string x;

    constructor() {
        a <- 0;
        x <- "0";
    }

    mut receive() {
        a <- 1;
        x <- "1";
    }

    mut fallback() {
        a <- 2;
        x <- "2";
    }

    public mut fn f1 () override {
        return;
    }
}

open proxy Proxy for Facet1, Facet2 {
    @      *   public      bytes32 test;
    @ Facet1   private mut string x; 
    @ Facet1   public  mut uint256[][5][] v;
    @ Facet2   private     mapping (uint256 => mapping (string => uint16[][5])) m;
}

facet Facet1 to Proxy {
    public mut fn f1 (uint256 x) -> string {
        mut uint256 c := x;
        mut uint256  a := 0;
        while (c != 0) {
            c := c / 10;
            ++x;
        }
        for (uint256 i := 0; i < 10; ++i) {
            if (i == 3) {
                continue;
            }
            if (i == 5) {
                break;
            }
        }
        for break in container {
            y[i] <- x;
        }
        return c;
    }
}

facet Facet2 to Proxy {
    private pay mut fn f2 () -> bool {
        test1 memory t := test1("123", 456);
        test[2] memory tests := [test1("1", 2), test1("3", 4)];
        1 - 2;
        [1, 2, 3];
        test1("x", 1);
        return true;
    }
}

struct test1 {
    string x;
    uint256 y;
}

enum test2 {
    VALUE1,
    VALUE2
}