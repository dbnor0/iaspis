module Proxy;

import ERC721;

abstract contract Contract {
    public  uint256 a;
    private string x;

    constructor() {
        a <- 0;
        x <- "0";
    }

    mut receive() {
        require(msg.value > 5);
        a <- 1;
        x <- "1";
    }

    mut fallback() {
        a <- 2;
        x <- "2";
    }

    public mut fn f1 () override {
        return;
    }
}

open proxy Proxy for Facet1, Facet2 {
    @      *   public      bytes32 test;
    @ Facet1   private mut string x; 
}

facet Facet1 to Proxy {
    public mut fn f1 (uint256 x) -> string {
        mut uint256 c := x;
        mut uint256  a := 0;
        return c;
    }
}

facet Facet2 to Proxy {
    private pay mut fn f2 () -> bool {
        test1("x", 1);
        return true;
    }
}