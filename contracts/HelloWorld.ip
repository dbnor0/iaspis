module HelloWorld;

import Utils;

contract Contract {
  public  uint256 a;
  private string x;
  private C myC;
 
  constructor() {
    myC <- new C(10);
    a <- 0;
    x <- "0";
  }

  mut receive() {
    a <- 1;
    x <- "1";
  }

  mut fallback() {
    a <- 2;
    x <- "2";
  }

  public fn fact (uint256 n) -> uint256 {
    if (n == 1) {
      return 1;
    }
    return n * fact(n - 1);
  }

  public mut fn f1 () override {
    a <- 123;
    if (true) {
      return;
    } else {
      return;
    }
    a <- 256;
  }
}

open proxy Proxy for Facet1, Facet2 {
  @      *   public      bytes32 test;
  @ Facet1   private mut string x;
  @ Facet2   private mut string y; 
}

facet Facet1 to Proxy {
  public mut fn f1 (uint256 uh) -> string {
    mut uint256 x := 123;
    mut string c := "123";
    mut string q := "abc";
    return c;
  }
}

facet Facet2 to Proxy {
  private fn sq(uint256 x) -> uint256 {
    return x * x;
  }

  private pay mut fn f2 () -> bool {
    uint256 A := sq(25);
    return true;
  }
}

facet Facet3 to Proxy {

}